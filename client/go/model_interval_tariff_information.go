/*
Amber Electric Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IntervalTariffInformation Information about how your tariff is affecting this interval
type IntervalTariffInformation struct {
	// The Time of Use period that is currently active. Only available if the site in on a time of use tariff
	Period *string `json:"period,omitempty"`
	// The Time of Use season that is currently active. Only available if the site in on a time of use tariff
	Season *string `json:"season,omitempty"`
	// The block that is currently active. Only available in the site in on a block tariff
	Block *float32 `json:"block,omitempty"`
	// Is this interval currently in the demand window? Only available if the site in on a demand tariff
	DemandWindow *bool `json:"demandWindow,omitempty"`
}

// NewIntervalTariffInformation instantiates a new IntervalTariffInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntervalTariffInformation() *IntervalTariffInformation {
	this := IntervalTariffInformation{}
	return &this
}

// NewIntervalTariffInformationWithDefaults instantiates a new IntervalTariffInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntervalTariffInformationWithDefaults() *IntervalTariffInformation {
	this := IntervalTariffInformation{}
	return &this
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *IntervalTariffInformation) GetPeriod() string {
	if o == nil || o.Period == nil {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntervalTariffInformation) GetPeriodOk() (*string, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *IntervalTariffInformation) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *IntervalTariffInformation) SetPeriod(v string) {
	o.Period = &v
}

// GetSeason returns the Season field value if set, zero value otherwise.
func (o *IntervalTariffInformation) GetSeason() string {
	if o == nil || o.Season == nil {
		var ret string
		return ret
	}
	return *o.Season
}

// GetSeasonOk returns a tuple with the Season field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntervalTariffInformation) GetSeasonOk() (*string, bool) {
	if o == nil || o.Season == nil {
		return nil, false
	}
	return o.Season, true
}

// HasSeason returns a boolean if a field has been set.
func (o *IntervalTariffInformation) HasSeason() bool {
	if o != nil && o.Season != nil {
		return true
	}

	return false
}

// SetSeason gets a reference to the given string and assigns it to the Season field.
func (o *IntervalTariffInformation) SetSeason(v string) {
	o.Season = &v
}

// GetBlock returns the Block field value if set, zero value otherwise.
func (o *IntervalTariffInformation) GetBlock() float32 {
	if o == nil || o.Block == nil {
		var ret float32
		return ret
	}
	return *o.Block
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntervalTariffInformation) GetBlockOk() (*float32, bool) {
	if o == nil || o.Block == nil {
		return nil, false
	}
	return o.Block, true
}

// HasBlock returns a boolean if a field has been set.
func (o *IntervalTariffInformation) HasBlock() bool {
	if o != nil && o.Block != nil {
		return true
	}

	return false
}

// SetBlock gets a reference to the given float32 and assigns it to the Block field.
func (o *IntervalTariffInformation) SetBlock(v float32) {
	o.Block = &v
}

// GetDemandWindow returns the DemandWindow field value if set, zero value otherwise.
func (o *IntervalTariffInformation) GetDemandWindow() bool {
	if o == nil || o.DemandWindow == nil {
		var ret bool
		return ret
	}
	return *o.DemandWindow
}

// GetDemandWindowOk returns a tuple with the DemandWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntervalTariffInformation) GetDemandWindowOk() (*bool, bool) {
	if o == nil || o.DemandWindow == nil {
		return nil, false
	}
	return o.DemandWindow, true
}

// HasDemandWindow returns a boolean if a field has been set.
func (o *IntervalTariffInformation) HasDemandWindow() bool {
	if o != nil && o.DemandWindow != nil {
		return true
	}

	return false
}

// SetDemandWindow gets a reference to the given bool and assigns it to the DemandWindow field.
func (o *IntervalTariffInformation) SetDemandWindow(v bool) {
	o.DemandWindow = &v
}

func (o IntervalTariffInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Period != nil {
		toSerialize["period"] = o.Period
	}
	if o.Season != nil {
		toSerialize["season"] = o.Season
	}
	if o.Block != nil {
		toSerialize["block"] = o.Block
	}
	if o.DemandWindow != nil {
		toSerialize["demandWindow"] = o.DemandWindow
	}
	return json.Marshal(toSerialize)
}

type NullableIntervalTariffInformation struct {
	value *IntervalTariffInformation
	isSet bool
}

func (v NullableIntervalTariffInformation) Get() *IntervalTariffInformation {
	return v.value
}

func (v *NullableIntervalTariffInformation) Set(val *IntervalTariffInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableIntervalTariffInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableIntervalTariffInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntervalTariffInformation(val *IntervalTariffInformation) *NullableIntervalTariffInformation {
	return &NullableIntervalTariffInformation{value: val, isSet: true}
}

func (v NullableIntervalTariffInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntervalTariffInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


