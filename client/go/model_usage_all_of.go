/*
Amber Electric Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UsageAllOf struct for UsageAllOf
type UsageAllOf struct {
	Type *string `json:"type,omitempty"`
	// Meter channel identifier
	ChannelIdentifier *string `json:"channelIdentifier,omitempty"`
	// Number of kWh you consumed or generated. Generated numbers will be negative
	Kwh float32 `json:"kwh"`
	// If the metering company has had trouble contacting your meter, they may make an estimate of your usage for that period. Billable data is data that will appear on your bill.
	Quality string `json:"quality"`
	// The total cost of your consumption or generation for this period - includes GST
	Cost float32 `json:"cost"`
}

// NewUsageAllOf instantiates a new UsageAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageAllOf(kwh float32, quality string, cost float32) *UsageAllOf {
	this := UsageAllOf{}
	this.Kwh = kwh
	this.Quality = quality
	this.Cost = cost
	return &this
}

// NewUsageAllOfWithDefaults instantiates a new UsageAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageAllOfWithDefaults() *UsageAllOf {
	this := UsageAllOf{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UsageAllOf) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageAllOf) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UsageAllOf) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UsageAllOf) SetType(v string) {
	o.Type = &v
}

// GetChannelIdentifier returns the ChannelIdentifier field value if set, zero value otherwise.
func (o *UsageAllOf) GetChannelIdentifier() string {
	if o == nil || o.ChannelIdentifier == nil {
		var ret string
		return ret
	}
	return *o.ChannelIdentifier
}

// GetChannelIdentifierOk returns a tuple with the ChannelIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageAllOf) GetChannelIdentifierOk() (*string, bool) {
	if o == nil || o.ChannelIdentifier == nil {
		return nil, false
	}
	return o.ChannelIdentifier, true
}

// HasChannelIdentifier returns a boolean if a field has been set.
func (o *UsageAllOf) HasChannelIdentifier() bool {
	if o != nil && o.ChannelIdentifier != nil {
		return true
	}

	return false
}

// SetChannelIdentifier gets a reference to the given string and assigns it to the ChannelIdentifier field.
func (o *UsageAllOf) SetChannelIdentifier(v string) {
	o.ChannelIdentifier = &v
}

// GetKwh returns the Kwh field value
func (o *UsageAllOf) GetKwh() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Kwh
}

// GetKwhOk returns a tuple with the Kwh field value
// and a boolean to check if the value has been set.
func (o *UsageAllOf) GetKwhOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Kwh, true
}

// SetKwh sets field value
func (o *UsageAllOf) SetKwh(v float32) {
	o.Kwh = v
}

// GetQuality returns the Quality field value
func (o *UsageAllOf) GetQuality() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Quality
}

// GetQualityOk returns a tuple with the Quality field value
// and a boolean to check if the value has been set.
func (o *UsageAllOf) GetQualityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Quality, true
}

// SetQuality sets field value
func (o *UsageAllOf) SetQuality(v string) {
	o.Quality = v
}

// GetCost returns the Cost field value
func (o *UsageAllOf) GetCost() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Cost
}

// GetCostOk returns a tuple with the Cost field value
// and a boolean to check if the value has been set.
func (o *UsageAllOf) GetCostOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Cost, true
}

// SetCost sets field value
func (o *UsageAllOf) SetCost(v float32) {
	o.Cost = v
}

func (o UsageAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.ChannelIdentifier != nil {
		toSerialize["channelIdentifier"] = o.ChannelIdentifier
	}
	if true {
		toSerialize["kwh"] = o.Kwh
	}
	if true {
		toSerialize["quality"] = o.Quality
	}
	if true {
		toSerialize["cost"] = o.Cost
	}
	return json.Marshal(toSerialize)
}

type NullableUsageAllOf struct {
	value *UsageAllOf
	isSet bool
}

func (v NullableUsageAllOf) Get() *UsageAllOf {
	return v.value
}

func (v *NullableUsageAllOf) Set(val *UsageAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageAllOf(val *UsageAllOf) *NullableUsageAllOf {
	return &NullableUsageAllOf{value: val, isSet: true}
}

func (v NullableUsageAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


