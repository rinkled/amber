/*
Amber Electric Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Site struct for Site
type Site struct {
	// Unique Site Identifier
	Id string `json:"id"`
	// National Metering Identifier (NMI) for the site
	Nmi string `json:"nmi"`
	// List of channels that are readable from your meter
	Channels []SitesChannels `json:"channels"`
	// The name of the site's network
	Network string `json:"network"`
}

// NewSite instantiates a new Site object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSite(id string, nmi string, channels []SitesChannels, network string) *Site {
	this := Site{}
	this.Id = id
	this.Nmi = nmi
	this.Channels = channels
	this.Network = network
	return &this
}

// NewSiteWithDefaults instantiates a new Site object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteWithDefaults() *Site {
	this := Site{}
	return &this
}

// GetId returns the Id field value
func (o *Site) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Site) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Site) SetId(v string) {
	o.Id = v
}

// GetNmi returns the Nmi field value
func (o *Site) GetNmi() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Nmi
}

// GetNmiOk returns a tuple with the Nmi field value
// and a boolean to check if the value has been set.
func (o *Site) GetNmiOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Nmi, true
}

// SetNmi sets field value
func (o *Site) SetNmi(v string) {
	o.Nmi = v
}

// GetChannels returns the Channels field value
func (o *Site) GetChannels() []SitesChannels {
	if o == nil {
		var ret []SitesChannels
		return ret
	}

	return o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value
// and a boolean to check if the value has been set.
func (o *Site) GetChannelsOk() ([]SitesChannels, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Channels, true
}

// SetChannels sets field value
func (o *Site) SetChannels(v []SitesChannels) {
	o.Channels = v
}

// GetNetwork returns the Network field value
func (o *Site) GetNetwork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *Site) GetNetworkOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *Site) SetNetwork(v string) {
	o.Network = v
}

func (o Site) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["nmi"] = o.Nmi
	}
	if true {
		toSerialize["channels"] = o.Channels
	}
	if true {
		toSerialize["network"] = o.Network
	}
	return json.Marshal(toSerialize)
}

type NullableSite struct {
	value *Site
	isSet bool
}

func (v NullableSite) Get() *Site {
	return v.value
}

func (v *NullableSite) Set(val *Site) {
	v.value = val
	v.isSet = true
}

func (v NullableSite) IsSet() bool {
	return v.isSet
}

func (v *NullableSite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSite(val *Site) *NullableSite {
	return &NullableSite{value: val, isSet: true}
}

func (v NullableSite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


