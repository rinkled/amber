/*
Amber Electric Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CurrentIntervalAllOf Returns the current interval's forecasted price comprised of the weighted average of 5-minute acutal prices and 5-minute forecast prices. In the last 5-minutes of the interval, the price represents the final price for that interval.
type CurrentIntervalAllOf struct {
	Type *string `json:"type,omitempty"`
	Range NullableForecastIntervalAllOfRange `json:"range,omitempty"`
	// Shows true the current price is an estimate. Shows false is the price has been locked in.
	Estimate bool `json:"estimate"`
}

// NewCurrentIntervalAllOf instantiates a new CurrentIntervalAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrentIntervalAllOf(estimate bool) *CurrentIntervalAllOf {
	this := CurrentIntervalAllOf{}
	this.Estimate = estimate
	return &this
}

// NewCurrentIntervalAllOfWithDefaults instantiates a new CurrentIntervalAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrentIntervalAllOfWithDefaults() *CurrentIntervalAllOf {
	this := CurrentIntervalAllOf{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CurrentIntervalAllOf) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentIntervalAllOf) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CurrentIntervalAllOf) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CurrentIntervalAllOf) SetType(v string) {
	o.Type = &v
}

// GetRange returns the Range field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentIntervalAllOf) GetRange() ForecastIntervalAllOfRange {
	if o == nil || o.Range.Get() == nil {
		var ret ForecastIntervalAllOfRange
		return ret
	}
	return *o.Range.Get()
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentIntervalAllOf) GetRangeOk() (*ForecastIntervalAllOfRange, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Range.Get(), o.Range.IsSet()
}

// HasRange returns a boolean if a field has been set.
func (o *CurrentIntervalAllOf) HasRange() bool {
	if o != nil && o.Range.IsSet() {
		return true
	}

	return false
}

// SetRange gets a reference to the given NullableForecastIntervalAllOfRange and assigns it to the Range field.
func (o *CurrentIntervalAllOf) SetRange(v ForecastIntervalAllOfRange) {
	o.Range.Set(&v)
}
// SetRangeNil sets the value for Range to be an explicit nil
func (o *CurrentIntervalAllOf) SetRangeNil() {
	o.Range.Set(nil)
}

// UnsetRange ensures that no value is present for Range, not even an explicit nil
func (o *CurrentIntervalAllOf) UnsetRange() {
	o.Range.Unset()
}

// GetEstimate returns the Estimate field value
func (o *CurrentIntervalAllOf) GetEstimate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Estimate
}

// GetEstimateOk returns a tuple with the Estimate field value
// and a boolean to check if the value has been set.
func (o *CurrentIntervalAllOf) GetEstimateOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Estimate, true
}

// SetEstimate sets field value
func (o *CurrentIntervalAllOf) SetEstimate(v bool) {
	o.Estimate = v
}

func (o CurrentIntervalAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Range.IsSet() {
		toSerialize["range"] = o.Range.Get()
	}
	if true {
		toSerialize["estimate"] = o.Estimate
	}
	return json.Marshal(toSerialize)
}

type NullableCurrentIntervalAllOf struct {
	value *CurrentIntervalAllOf
	isSet bool
}

func (v NullableCurrentIntervalAllOf) Get() *CurrentIntervalAllOf {
	return v.value
}

func (v *NullableCurrentIntervalAllOf) Set(val *CurrentIntervalAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrentIntervalAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrentIntervalAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrentIntervalAllOf(val *CurrentIntervalAllOf) *NullableCurrentIntervalAllOf {
	return &NullableCurrentIntervalAllOf{value: val, isSet: true}
}

func (v NullableCurrentIntervalAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrentIntervalAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


