/*
Amber Electric Public API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Usage struct for Usage
type Usage struct {
	Type string `json:"type"`
	// Length of the interval in minutes.
	Duration float32 `json:"duration"`
	// NEM spot price (c/kWh). This is the price generators get paid to generate electricity, and what drives the variable component of your perKwh price - includes GST
	SpotPerKwh float32 `json:"spotPerKwh"`
	// Number of cents you will pay per kilowatt-hour (c/kWh) - includes GST
	PerKwh float32 `json:"perKwh"`
	// Date the interval belongs to (in NEM time). This may be different to the date component of nemTime, as the last interval of the day ends at 12:00 the following day. Formatted as a ISO 8601 date
	Date string `json:"date"`
	// The interval's NEM time. This represents the time at the end of the interval UTC+10. Formatted as a ISO 8601 time
	NemTime time.Time `json:"nemTime"`
	// Start time of the interval in UTC. Formatted as a ISO 8601 time
	StartTime time.Time `json:"startTime"`
	// End time of the interval in UTC. Formatted as a ISO 8601 time
	EndTime time.Time `json:"endTime"`
	// Percentage of renewables in the grid
	Renewables float32 `json:"renewables"`
	// Meter channel type
	ChannelType string `json:"channelType"`
	TariffInformation NullableIntervalTariffInformation `json:"tariffInformation,omitempty"`
	// Indicates whether this interval will potentially spike, or is currently in a spike state
	SpikeStatus string `json:"spikeStatus"`
	// Describes the current price. Gives you an indication of how cheap the price is in relation to the average VMO and DMO. Note: Negative is no longer used. It has been replaced with extremelyLow.
	Descriptor *string `json:"descriptor,omitempty"`
	// Meter channel identifier
	ChannelIdentifier *string `json:"channelIdentifier,omitempty"`
	// Number of kWh you consumed or generated. Generated numbers will be negative
	Kwh float32 `json:"kwh"`
	// If the metering company has had trouble contacting your meter, they may make an estimate of your usage for that period. Billable data is data that will appear on your bill.
	Quality string `json:"quality"`
	// The total cost of your consumption or generation for this period - includes GST
	Cost float32 `json:"cost"`
}

// NewUsage instantiates a new Usage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsage(type_ string, duration float32, spotPerKwh float32, perKwh float32, date string, nemTime time.Time, startTime time.Time, endTime time.Time, renewables float32, channelType string, spikeStatus string, kwh float32, quality string, cost float32) *Usage {
	this := Usage{}
	this.Type = type_
	this.Duration = duration
	this.SpotPerKwh = spotPerKwh
	this.PerKwh = perKwh
	this.Date = date
	this.NemTime = nemTime
	this.StartTime = startTime
	this.EndTime = endTime
	this.Renewables = renewables
	this.ChannelType = channelType
	this.SpikeStatus = spikeStatus
	this.Kwh = kwh
	this.Quality = quality
	this.Cost = cost
	return &this
}

// NewUsageWithDefaults instantiates a new Usage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageWithDefaults() *Usage {
	this := Usage{}
	return &this
}

// GetType returns the Type field value
func (o *Usage) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Usage) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Usage) SetType(v string) {
	o.Type = v
}

// GetDuration returns the Duration field value
func (o *Usage) GetDuration() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *Usage) GetDurationOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *Usage) SetDuration(v float32) {
	o.Duration = v
}

// GetSpotPerKwh returns the SpotPerKwh field value
func (o *Usage) GetSpotPerKwh() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SpotPerKwh
}

// GetSpotPerKwhOk returns a tuple with the SpotPerKwh field value
// and a boolean to check if the value has been set.
func (o *Usage) GetSpotPerKwhOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SpotPerKwh, true
}

// SetSpotPerKwh sets field value
func (o *Usage) SetSpotPerKwh(v float32) {
	o.SpotPerKwh = v
}

// GetPerKwh returns the PerKwh field value
func (o *Usage) GetPerKwh() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PerKwh
}

// GetPerKwhOk returns a tuple with the PerKwh field value
// and a boolean to check if the value has been set.
func (o *Usage) GetPerKwhOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PerKwh, true
}

// SetPerKwh sets field value
func (o *Usage) SetPerKwh(v float32) {
	o.PerKwh = v
}

// GetDate returns the Date field value
func (o *Usage) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *Usage) GetDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *Usage) SetDate(v string) {
	o.Date = v
}

// GetNemTime returns the NemTime field value
func (o *Usage) GetNemTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.NemTime
}

// GetNemTimeOk returns a tuple with the NemTime field value
// and a boolean to check if the value has been set.
func (o *Usage) GetNemTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NemTime, true
}

// SetNemTime sets field value
func (o *Usage) SetNemTime(v time.Time) {
	o.NemTime = v
}

// GetStartTime returns the StartTime field value
func (o *Usage) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *Usage) GetStartTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *Usage) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *Usage) GetEndTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *Usage) GetEndTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *Usage) SetEndTime(v time.Time) {
	o.EndTime = v
}

// GetRenewables returns the Renewables field value
func (o *Usage) GetRenewables() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Renewables
}

// GetRenewablesOk returns a tuple with the Renewables field value
// and a boolean to check if the value has been set.
func (o *Usage) GetRenewablesOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Renewables, true
}

// SetRenewables sets field value
func (o *Usage) SetRenewables(v float32) {
	o.Renewables = v
}

// GetChannelType returns the ChannelType field value
func (o *Usage) GetChannelType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChannelType
}

// GetChannelTypeOk returns a tuple with the ChannelType field value
// and a boolean to check if the value has been set.
func (o *Usage) GetChannelTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ChannelType, true
}

// SetChannelType sets field value
func (o *Usage) SetChannelType(v string) {
	o.ChannelType = v
}

// GetTariffInformation returns the TariffInformation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Usage) GetTariffInformation() IntervalTariffInformation {
	if o == nil || o.TariffInformation.Get() == nil {
		var ret IntervalTariffInformation
		return ret
	}
	return *o.TariffInformation.Get()
}

// GetTariffInformationOk returns a tuple with the TariffInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Usage) GetTariffInformationOk() (*IntervalTariffInformation, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TariffInformation.Get(), o.TariffInformation.IsSet()
}

// HasTariffInformation returns a boolean if a field has been set.
func (o *Usage) HasTariffInformation() bool {
	if o != nil && o.TariffInformation.IsSet() {
		return true
	}

	return false
}

// SetTariffInformation gets a reference to the given NullableIntervalTariffInformation and assigns it to the TariffInformation field.
func (o *Usage) SetTariffInformation(v IntervalTariffInformation) {
	o.TariffInformation.Set(&v)
}
// SetTariffInformationNil sets the value for TariffInformation to be an explicit nil
func (o *Usage) SetTariffInformationNil() {
	o.TariffInformation.Set(nil)
}

// UnsetTariffInformation ensures that no value is present for TariffInformation, not even an explicit nil
func (o *Usage) UnsetTariffInformation() {
	o.TariffInformation.Unset()
}

// GetSpikeStatus returns the SpikeStatus field value
func (o *Usage) GetSpikeStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpikeStatus
}

// GetSpikeStatusOk returns a tuple with the SpikeStatus field value
// and a boolean to check if the value has been set.
func (o *Usage) GetSpikeStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SpikeStatus, true
}

// SetSpikeStatus sets field value
func (o *Usage) SetSpikeStatus(v string) {
	o.SpikeStatus = v
}

// GetDescriptor returns the Descriptor field value if set, zero value otherwise.
func (o *Usage) GetDescriptor() string {
	if o == nil || o.Descriptor == nil {
		var ret string
		return ret
	}
	return *o.Descriptor
}

// GetDescriptorOk returns a tuple with the Descriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Usage) GetDescriptorOk() (*string, bool) {
	if o == nil || o.Descriptor == nil {
		return nil, false
	}
	return o.Descriptor, true
}

// HasDescriptor returns a boolean if a field has been set.
func (o *Usage) HasDescriptor() bool {
	if o != nil && o.Descriptor != nil {
		return true
	}

	return false
}

// SetDescriptor gets a reference to the given string and assigns it to the Descriptor field.
func (o *Usage) SetDescriptor(v string) {
	o.Descriptor = &v
}

// GetChannelIdentifier returns the ChannelIdentifier field value if set, zero value otherwise.
func (o *Usage) GetChannelIdentifier() string {
	if o == nil || o.ChannelIdentifier == nil {
		var ret string
		return ret
	}
	return *o.ChannelIdentifier
}

// GetChannelIdentifierOk returns a tuple with the ChannelIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Usage) GetChannelIdentifierOk() (*string, bool) {
	if o == nil || o.ChannelIdentifier == nil {
		return nil, false
	}
	return o.ChannelIdentifier, true
}

// HasChannelIdentifier returns a boolean if a field has been set.
func (o *Usage) HasChannelIdentifier() bool {
	if o != nil && o.ChannelIdentifier != nil {
		return true
	}

	return false
}

// SetChannelIdentifier gets a reference to the given string and assigns it to the ChannelIdentifier field.
func (o *Usage) SetChannelIdentifier(v string) {
	o.ChannelIdentifier = &v
}

// GetKwh returns the Kwh field value
func (o *Usage) GetKwh() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Kwh
}

// GetKwhOk returns a tuple with the Kwh field value
// and a boolean to check if the value has been set.
func (o *Usage) GetKwhOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Kwh, true
}

// SetKwh sets field value
func (o *Usage) SetKwh(v float32) {
	o.Kwh = v
}

// GetQuality returns the Quality field value
func (o *Usage) GetQuality() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Quality
}

// GetQualityOk returns a tuple with the Quality field value
// and a boolean to check if the value has been set.
func (o *Usage) GetQualityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Quality, true
}

// SetQuality sets field value
func (o *Usage) SetQuality(v string) {
	o.Quality = v
}

// GetCost returns the Cost field value
func (o *Usage) GetCost() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Cost
}

// GetCostOk returns a tuple with the Cost field value
// and a boolean to check if the value has been set.
func (o *Usage) GetCostOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Cost, true
}

// SetCost sets field value
func (o *Usage) SetCost(v float32) {
	o.Cost = v
}

func (o Usage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["duration"] = o.Duration
	}
	if true {
		toSerialize["spotPerKwh"] = o.SpotPerKwh
	}
	if true {
		toSerialize["perKwh"] = o.PerKwh
	}
	if true {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["nemTime"] = o.NemTime
	}
	if true {
		toSerialize["startTime"] = o.StartTime
	}
	if true {
		toSerialize["endTime"] = o.EndTime
	}
	if true {
		toSerialize["renewables"] = o.Renewables
	}
	if true {
		toSerialize["channelType"] = o.ChannelType
	}
	if o.TariffInformation.IsSet() {
		toSerialize["tariffInformation"] = o.TariffInformation.Get()
	}
	if true {
		toSerialize["spikeStatus"] = o.SpikeStatus
	}
	if o.Descriptor != nil {
		toSerialize["descriptor"] = o.Descriptor
	}
	if o.ChannelIdentifier != nil {
		toSerialize["channelIdentifier"] = o.ChannelIdentifier
	}
	if true {
		toSerialize["kwh"] = o.Kwh
	}
	if true {
		toSerialize["quality"] = o.Quality
	}
	if true {
		toSerialize["cost"] = o.Cost
	}
	return json.Marshal(toSerialize)
}

type NullableUsage struct {
	value *Usage
	isSet bool
}

func (v NullableUsage) Get() *Usage {
	return v.value
}

func (v *NullableUsage) Set(val *Usage) {
	v.value = val
	v.isSet = true
}

func (v NullableUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsage(val *Usage) *NullableUsage {
	return &NullableUsage{value: val, isSet: true}
}

func (v NullableUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


